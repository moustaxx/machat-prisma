# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type ConversationConnection {
  """A list of edges."""
  edges: [ConversationEdge]

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Identifies the total count of items in the connection."""
  totalCount: Float!
}

type ConversationEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: ConversationType!
}

input ConversationListRelationFilter {
  every: ConversationWhereInput
  none: ConversationWhereInput
  some: ConversationWhereInput
}

input ConversationOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  name: SortOrder
}

input ConversationRelationFilter {
  is: ConversationWhereInput
  isNot: ConversationWhereInput
}

type ConversationType {
  createdAt: DateTime!
  id: Int!
  lastRead(cursor: LastReadWhereUniqueInput, distinct: [LastReadScalarFieldEnum!], orderBy: [LastReadOrderByInput!], skip: Int, take: Int, where: LastReadWhereInput): [LastRead!]!
  messages(cursor: MessageWhereUniqueInput, distinct: [MessageScalarFieldEnum!], orderBy: [MessageOrderByInput!], skip: Int, take: Int, where: MessageWhereInput): [Message!]!
  name: String!
  participants(cursor: PersonWhereUniqueInput, distinct: [PersonScalarFieldEnum!], orderBy: [PersonOrderByInput!], skip: Int, take: Int, where: PersonWhereInput): [PersonType!]!
}

input ConversationWhereInput {
  AND: [ConversationWhereInput!]
  NOT: [ConversationWhereInput!]
  OR: [ConversationWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  lastRead: LastReadListRelationFilter
  messages: MessageListRelationFilter
  name: StringFilter
  participants: PersonListRelationFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type LastRead {
  conversationID: Int!
  lastRead: DateTime!
  personID: Int!
}

input LastReadListRelationFilter {
  every: LastReadWhereInput
  none: LastReadWhereInput
  some: LastReadWhereInput
}

input LastReadOrderByInput {
  conversation: ConversationOrderByInput
  conversationID: SortOrder
  lastRead: SortOrder
  person: PersonOrderByInput
  personID: SortOrder
}

input LastReadPersonIDConversationIDCompoundUniqueInput {
  conversationID: Int!
  personID: Int!
}

enum LastReadScalarFieldEnum {
  conversationID
  lastRead
  personID
}

type LastReadType {
  conversationID: Int!
  lastRead: DateTime!
  personID: Int!
}

input LastReadWhereInput {
  AND: [LastReadWhereInput!]
  NOT: [LastReadWhereInput!]
  OR: [LastReadWhereInput!]
  conversation: ConversationRelationFilter
  conversationID: IntFilter
  lastRead: DateTimeFilter
  person: PersonRelationFilter
  personID: IntFilter
}

input LastReadWhereUniqueInput {
  personID_conversationID: LastReadPersonIDConversationIDCompoundUniqueInput
}

type Message {
  authorID: Int
  content: String!
  conversationID: Int!
  createdAt: DateTime!
  id: Int!
}

input MessageListRelationFilter {
  every: MessageWhereInput
  none: MessageWhereInput
  some: MessageWhereInput
}

input MessageOrderByInput {
  author: PersonOrderByInput
  authorID: SortOrder
  content: SortOrder
  conversation: ConversationOrderByInput
  conversationID: SortOrder
  createdAt: SortOrder
  id: SortOrder
}

enum MessageScalarFieldEnum {
  authorID
  content
  conversationID
  createdAt
  id
}

type MessageType {
  authorID: Int
  content: String!
  conversationID: Int!
  createdAt: DateTime!
  id: Int!
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  author: PersonRelationFilter
  authorID: IntNullableFilter
  content: StringFilter
  conversation: ConversationRelationFilter
  conversationID: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
}

input MessageWhereUniqueInput {
  id: Int
}

type Mutation {
  addPersonToConversation(conversationId: Int!, personId: Int!): ConversationType!
  createMessage(content: String!, conversationId: Int!): MessageType!
  login(password: String!, username: String!): PersonType!
  logout: PersonType!
  markConvAsRead(conversationId: Int!): LastReadType!
  register(email: String!, password: String!, username: String!): PersonType!
  removePersonFromConversation(conversationId: Int!, personId: Int!): ConversationType!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

input PersonListRelationFilter {
  every: PersonWhereInput
  none: PersonWhereInput
  some: PersonWhereInput
}

input PersonOrderByInput {
  createdAt: SortOrder
  email: SortOrder
  hash: SortOrder
  id: SortOrder
  isAdmin: SortOrder
  lastSeen: SortOrder
  username: SortOrder
}

input PersonRelationFilter {
  is: PersonWhereInput
  isNot: PersonWhereInput
}

enum PersonScalarFieldEnum {
  createdAt
  email
  hash
  id
  isAdmin
  lastSeen
  username
}

type PersonType {
  conversations(after: String, before: String, first: Int, last: Int): ConversationConnection!
  createdAt: DateTime!
  email: String!
  id: Int!
  isActive: Boolean!
  isAdmin: Boolean!
  lastSeen: DateTime
  messages(cursor: MessageWhereUniqueInput, distinct: [MessageScalarFieldEnum!], orderBy: [MessageOrderByInput!], skip: Int, take: Int, where: MessageWhereInput): [Message!]!
  username: String!
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  conversations: ConversationListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  hash: StringFilter
  id: IntFilter
  isAdmin: BoolFilter
  lastRead: LastReadListRelationFilter
  lastSeen: DateTimeNullableFilter
  messages: MessageListRelationFilter
  username: StringFilter
}

input PersonWhereUniqueInput {
  email: String
  id: Int
  username: String
}

type Query {
  conversation(whereId: Int!): ConversationType!
  me: PersonType!
  person(where: PersonWhereUniqueInput!): PersonType!
  sessionOwner: PersonType!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  newMessages(conversationId: Int!): Boolean!
  personActiveStatus(userId: Int!): Boolean!
}
