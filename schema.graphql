### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Conversation {
  createdAt: DateTime!
  id: Int!
  message(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int): [Message!]!
  name: String!
}

input ConversationCreateInput {
  createdAt: DateTime
  message: MessageCreateManyWithoutConversationInput
  name: String!
}

input ConversationCreateOneWithoutMessageInput {
  connect: ConversationWhereUniqueInput
  create: ConversationCreateWithoutMessageInput
}

input ConversationCreateWithoutMessageInput {
  createdAt: DateTime
  name: String!
}

input ConversationUpdateInput {
  createdAt: DateTime
  id: Int
  message: MessageUpdateManyWithoutConversationInput
  name: String
}

input ConversationUpdateOneRequiredWithoutMessageInput {
  connect: ConversationWhereUniqueInput
  create: ConversationCreateWithoutMessageInput
  update: ConversationUpdateWithoutMessageDataInput
  upsert: ConversationUpsertWithoutMessageInput
}

input ConversationUpdateWithoutMessageDataInput {
  createdAt: DateTime
  id: Int
  name: String
}

input ConversationUpsertWithoutMessageInput {
  create: ConversationCreateWithoutMessageInput!
  update: ConversationUpdateWithoutMessageDataInput!
}

input ConversationWhereUniqueInput {
  id: Int
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Message {
  content: String!
  conversation: Conversation!
  conversationID: Int!
  createdAt: DateTime!
  id: Int!
}

input MessageCreateInput {
  content: String!
  conversation: ConversationCreateOneWithoutMessageInput!
  createdAt: DateTime
}

input MessageCreateManyWithoutConversationInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutConversationInput!]
}

input MessageCreateWithoutConversationInput {
  content: String!
  createdAt: DateTime
}

input MessageScalarWhereInput {
  AND: [MessageScalarWhereInput!]
  content: StringFilter
  conversationID: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
}

input MessageUpdateInput {
  content: String
  conversation: ConversationUpdateOneRequiredWithoutMessageInput
  createdAt: DateTime
  id: Int
}

input MessageUpdateManyDataInput {
  content: String
  createdAt: DateTime
  id: Int
}

input MessageUpdateManyWithoutConversationInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutConversationInput!]
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutConversationInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutConversationInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  data: MessageUpdateManyDataInput!
  where: MessageScalarWhereInput!
}

input MessageUpdateWithoutConversationDataInput {
  content: String
  createdAt: DateTime
  id: Int
}

input MessageUpdateWithWhereUniqueWithoutConversationInput {
  data: MessageUpdateWithoutConversationDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutConversationInput {
  create: MessageCreateWithoutConversationInput!
  update: MessageUpdateWithoutConversationDataInput!
  where: MessageWhereUniqueInput!
}

input MessageWhereUniqueInput {
  id: Int
}

type Mutation {
  createOneConversation(data: ConversationCreateInput!): Conversation!
  createOneMessage(data: MessageCreateInput!): Message!
  deleteOneConversation(where: ConversationWhereUniqueInput!): Conversation
  deleteOneMessage(where: MessageWhereUniqueInput!): Message
  deleteOnePerson(where: PersonWhereUniqueInput!): Person
  register(email: String!, password: String!, username: String!): Person!
  updateOneConversation(data: ConversationUpdateInput!, where: ConversationWhereUniqueInput!): Conversation
  updateOneMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
}

type Person {
  createdAt: DateTime!
  email: String!
  id: Int!
  isActive: Boolean!
  lastSeen: DateTime
  username: String!
}

input PersonWhereUniqueInput {
  email: String
  id: Int
  username: String
}

type Query {
  conversation(where: ConversationWhereUniqueInput!): Conversation
  conversations(after: ConversationWhereUniqueInput, before: ConversationWhereUniqueInput, first: Int, last: Int): [Conversation!]!
  login(password: String!, username: String!): Person!
  logout: Person!
  message(where: MessageWhereUniqueInput!): Message
  messages(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int): [Message!]!
  people(after: PersonWhereUniqueInput, before: PersonWhereUniqueInput, first: Int, last: Int): [Person!]!
  person(where: PersonWhereUniqueInput!): Person
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}
