### This file was generated by Nexus Schema
### Do not make changes to this file directly


input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

type Conversation {
  createdAt: DateTime!
  id: Int!
  messages(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int): [Message!]!
  name: String!
  participants(after: PersonWhereUniqueInput, before: PersonWhereUniqueInput, first: Int, last: Int): [Person!]!
}

type ConversationConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [ConversationEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

input ConversationCreateInput {
  createdAt: DateTime
  messages: MessageCreateManyWithoutConversationInput
  name: String!
  participants: PersonCreateManyWithoutConversationsInput
}

input ConversationCreateManyWithoutParticipantsInput {
  connect: [ConversationWhereUniqueInput!]
  create: [ConversationCreateWithoutParticipantsInput!]
}

input ConversationCreateOneWithoutMessagesInput {
  connect: ConversationWhereUniqueInput
  create: ConversationCreateWithoutMessagesInput
}

input ConversationCreateWithoutMessagesInput {
  createdAt: DateTime
  name: String!
  participants: PersonCreateManyWithoutConversationsInput
}

input ConversationCreateWithoutParticipantsInput {
  createdAt: DateTime
  messages: MessageCreateManyWithoutConversationInput
  name: String!
}

type ConversationEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Conversation!
}

input ConversationScalarWhereInput {
  AND: [ConversationScalarWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  NOT: [ConversationScalarWhereInput!]
  OR: [ConversationScalarWhereInput!]
}

input ConversationUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutConversationInput
  name: StringFieldUpdateOperationsInput
  participants: PersonUpdateManyWithoutConversationsInput
}

input ConversationUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ConversationUpdateManyWithoutParticipantsInput {
  connect: [ConversationWhereUniqueInput!]
  create: [ConversationCreateWithoutParticipantsInput!]
  delete: [ConversationWhereUniqueInput!]
  deleteMany: [ConversationScalarWhereInput!]
  disconnect: [ConversationWhereUniqueInput!]
  set: [ConversationWhereUniqueInput!]
  update: [ConversationUpdateWithWhereUniqueWithoutParticipantsInput!]
  updateMany: [ConversationUpdateManyWithWhereNestedInput!]
  upsert: [ConversationUpsertWithWhereUniqueWithoutParticipantsInput!]
}

input ConversationUpdateManyWithWhereNestedInput {
  data: ConversationUpdateManyDataInput!
  where: ConversationScalarWhereInput!
}

input ConversationUpdateOneRequiredWithoutMessagesInput {
  connect: ConversationWhereUniqueInput
  create: ConversationCreateWithoutMessagesInput
  update: ConversationUpdateWithoutMessagesDataInput
  upsert: ConversationUpsertWithoutMessagesInput
}

input ConversationUpdateWithoutMessagesDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  participants: PersonUpdateManyWithoutConversationsInput
}

input ConversationUpdateWithoutParticipantsDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutConversationInput
  name: StringFieldUpdateOperationsInput
}

input ConversationUpdateWithWhereUniqueWithoutParticipantsInput {
  data: ConversationUpdateWithoutParticipantsDataInput!
  where: ConversationWhereUniqueInput!
}

input ConversationUpsertWithoutMessagesInput {
  create: ConversationCreateWithoutMessagesInput!
  update: ConversationUpdateWithoutMessagesDataInput!
}

input ConversationUpsertWithWhereUniqueWithoutParticipantsInput {
  create: ConversationCreateWithoutParticipantsInput!
  update: ConversationUpdateWithoutParticipantsDataInput!
  where: ConversationWhereUniqueInput!
}

input ConversationWhereUniqueInput {
  id: Int
}

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type Message {
  author: Person
  authorID: Int
  content: String!
  conversation: Conversation!
  conversationID: Int!
  createdAt: DateTime!
  id: Int!
}

input MessageCreateManyWithoutAuthorInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutAuthorInput!]
}

input MessageCreateManyWithoutConversationInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutConversationInput!]
}

input MessageCreateWithoutAuthorInput {
  content: String!
  conversation: ConversationCreateOneWithoutMessagesInput!
  createdAt: DateTime
}

input MessageCreateWithoutConversationInput {
  author: PersonCreateOneWithoutMessagesInput
  content: String!
  createdAt: DateTime
}

input MessageScalarWhereInput {
  AND: [MessageScalarWhereInput!]
  authorID: IntNullableFilter
  content: StringFilter
  conversationID: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
}

input MessageUpdateInput {
  author: PersonUpdateOneWithoutMessagesInput
  content: StringFieldUpdateOperationsInput
  conversation: ConversationUpdateOneRequiredWithoutMessagesInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input MessageUpdateManyDataInput {
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input MessageUpdateManyWithoutAuthorInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutAuthorInput!]
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutAuthorInput!]
}

input MessageUpdateManyWithoutConversationInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutConversationInput!]
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutConversationInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutConversationInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  data: MessageUpdateManyDataInput!
  where: MessageScalarWhereInput!
}

input MessageUpdateWithoutAuthorDataInput {
  content: StringFieldUpdateOperationsInput
  conversation: ConversationUpdateOneRequiredWithoutMessagesInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input MessageUpdateWithoutConversationDataInput {
  author: PersonUpdateOneWithoutMessagesInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input MessageUpdateWithWhereUniqueWithoutAuthorInput {
  data: MessageUpdateWithoutAuthorDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpdateWithWhereUniqueWithoutConversationInput {
  data: MessageUpdateWithoutConversationDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutAuthorInput {
  create: MessageCreateWithoutAuthorInput!
  update: MessageUpdateWithoutAuthorDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutConversationInput {
  create: MessageCreateWithoutConversationInput!
  update: MessageUpdateWithoutConversationDataInput!
  where: MessageWhereUniqueInput!
}

input MessageWhereUniqueInput {
  id: Int
}

type Mutation {
  addPersonToConversation(conversationId: Int!, personId: Int!): Conversation!
  createMessage(content: String!, conversationId: Int!): Message!
  createOneConversation(data: ConversationCreateInput!): Conversation!
  deleteOneConversation(where: ConversationWhereUniqueInput!): Conversation
  deleteOneMessage(where: MessageWhereUniqueInput!): Message
  deleteOnePerson(where: PersonWhereUniqueInput!): Person
  register(email: String!, password: String!, username: String!): Person!
  removePersonFromConversation(conversationId: Int!, personId: Int!): Conversation!
  updateOneConversation(data: ConversationUpdateInput!, where: ConversationWhereUniqueInput!): Conversation
  updateOneMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

type Person {
  conversations(
    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): ConversationConnection!
  createdAt: DateTime!
  email: String!
  id: Int!
  isActive: Boolean!
  isAdmin: Boolean
  lastSeen: DateTime
  username: String!
}

input PersonCreateManyWithoutConversationsInput {
  connect: [PersonWhereUniqueInput!]
  create: [PersonCreateWithoutConversationsInput!]
}

input PersonCreateOneWithoutMessagesInput {
  connect: PersonWhereUniqueInput
  create: PersonCreateWithoutMessagesInput
}

input PersonCreateWithoutConversationsInput {
  createdAt: DateTime
  email: String!
  hash: String!
  isActive: Boolean
  isAdmin: Boolean
  lastSeen: DateTime
  messages: MessageCreateManyWithoutAuthorInput
  username: String!
}

input PersonCreateWithoutMessagesInput {
  conversations: ConversationCreateManyWithoutParticipantsInput
  createdAt: DateTime
  email: String!
  hash: String!
  isActive: Boolean
  isAdmin: Boolean
  lastSeen: DateTime
  username: String!
}

input PersonScalarWhereInput {
  AND: [PersonScalarWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  hash: StringFilter
  id: IntFilter
  isActive: BoolFilter
  isAdmin: BoolNullableFilter
  lastSeen: DateTimeNullableFilter
  NOT: [PersonScalarWhereInput!]
  OR: [PersonScalarWhereInput!]
  username: StringFilter
}

input PersonUpdateManyDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  hash: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  isAdmin: NullableBoolFieldUpdateOperationsInput
  lastSeen: NullableDateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input PersonUpdateManyWithoutConversationsInput {
  connect: [PersonWhereUniqueInput!]
  create: [PersonCreateWithoutConversationsInput!]
  delete: [PersonWhereUniqueInput!]
  deleteMany: [PersonScalarWhereInput!]
  disconnect: [PersonWhereUniqueInput!]
  set: [PersonWhereUniqueInput!]
  update: [PersonUpdateWithWhereUniqueWithoutConversationsInput!]
  updateMany: [PersonUpdateManyWithWhereNestedInput!]
  upsert: [PersonUpsertWithWhereUniqueWithoutConversationsInput!]
}

input PersonUpdateManyWithWhereNestedInput {
  data: PersonUpdateManyDataInput!
  where: PersonScalarWhereInput!
}

input PersonUpdateOneWithoutMessagesInput {
  connect: PersonWhereUniqueInput
  create: PersonCreateWithoutMessagesInput
  delete: Boolean
  disconnect: Boolean
  update: PersonUpdateWithoutMessagesDataInput
  upsert: PersonUpsertWithoutMessagesInput
}

input PersonUpdateWithoutConversationsDataInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  hash: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  isAdmin: NullableBoolFieldUpdateOperationsInput
  lastSeen: NullableDateTimeFieldUpdateOperationsInput
  messages: MessageUpdateManyWithoutAuthorInput
  username: StringFieldUpdateOperationsInput
}

input PersonUpdateWithoutMessagesDataInput {
  conversations: ConversationUpdateManyWithoutParticipantsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  hash: StringFieldUpdateOperationsInput
  isActive: BoolFieldUpdateOperationsInput
  isAdmin: NullableBoolFieldUpdateOperationsInput
  lastSeen: NullableDateTimeFieldUpdateOperationsInput
  username: StringFieldUpdateOperationsInput
}

input PersonUpdateWithWhereUniqueWithoutConversationsInput {
  data: PersonUpdateWithoutConversationsDataInput!
  where: PersonWhereUniqueInput!
}

input PersonUpsertWithoutMessagesInput {
  create: PersonCreateWithoutMessagesInput!
  update: PersonUpdateWithoutMessagesDataInput!
}

input PersonUpsertWithWhereUniqueWithoutConversationsInput {
  create: PersonCreateWithoutConversationsInput!
  update: PersonUpdateWithoutConversationsDataInput!
  where: PersonWhereUniqueInput!
}

input PersonWhereUniqueInput {
  email: String
  id: Int
  username: String
}

type Query {
  conversation(whereId: Int!): Conversation!
  conversations(after: ConversationWhereUniqueInput, before: ConversationWhereUniqueInput, first: Int, last: Int): [Conversation!]!
  login(password: String!, username: String!): Person!
  logout: Person!
  me: Person!
  message(where: MessageWhereUniqueInput!): Message
  messages(after: MessageWhereUniqueInput, before: MessageWhereUniqueInput, first: Int, last: Int): [Message!]!
  people(after: PersonWhereUniqueInput, before: PersonWhereUniqueInput, first: Int, last: Int): [Person!]!
  person(where: PersonWhereUniqueInput!): Person!
  sessionOwner: Person!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}
